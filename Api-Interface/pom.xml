<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <!--引入我们自己的父工程-->
    <parent>
        <groupId>com.Reflux</groupId>
        <artifactId>Api-parent</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../Api-parent/pom.xml</relativePath> <!-- 需要指定父工程的pom文件位置 -->
    </parent>

    <artifactId>Api-Interface</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>Aaron-Interface</name>
    <description>Aaron-Interface</description>

    <properties>
        <java.version>1.8</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <!-- 只在运行时起作用，打包时不打进去
           （防止线上执行打包后的程序，启动文件监听线程File Watcher，耗费大量的内存资源） -->
            <scope>runtime</scope>
            <!-- 防止将依赖传递到其他模块中 -->
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!--使用hutool的http调用第三方接口-->
        <dependency>
            <groupId>cn.hutool</groupId>
            <artifactId>hutool-all</artifactId>
        </dependency>

        <!--当增加新的接口，可直接通过knife4j测试-->
        <!--knife4j-->
        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>knife4j-spring-boot-starter</artifactId>
        </dependency>
        <!--当增加新的接口，可以直接通过本单元，来测试apiClient能否调用接口成功（先绕过admin和网关）-->
        <dependency>
            <groupId>com.Reflux</groupId>
            <artifactId>Api-client-sdk</artifactId>
        </dependency>
        <dependency>
            <groupId>com.Reflux</groupId>
            <artifactId>Api-common</artifactId>
        </dependency>

        <!--nacos配置管理依赖-->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
        </dependency>
        <!--用于远程调用其他微服务提供的接口-->
        <!--nacos-discovery-->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>
        <!--feign-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>
        <!--负载均衡-->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-loadbalancer</artifactId>
        </dependency>
        <!--httpClient的依赖，改变feign底层客户端实现，使用连接池 -->
        <dependency>
            <groupId>io.github.openfeign</groupId>
            <artifactId>feign-httpclient</artifactId>
        </dependency>


    </dependencies>

    <build>
        <!-- 服务打包的最终名称 -->
        <finalName>Api-Interface</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <!--排除打包时不需要的依赖，lombok编译时生效，打包时不用-->
                <configuration>
                    <excludes>
                        <exclude>
                            <groupId>org.projectlombok</groupId>
                            <artifactId>lombok</artifactId>
                        </exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
